/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*********************!*\
  !*** ./src/code.js ***!
  \*********************/
var foregroundColor = [52, 45, 53]; // off black

var backgoundColor = [255, 255, 255]; // white

var foregroundAlpha = 1;
var backgroundAlpha = 1;

function convertRgbToHex(color) {
  var hex = color.map(function (col) {
    var hexColor = col.toString(16);
    return "0".concat(hexColor).slice(-2);
  }).join('');
  return "#".concat(hex);
}

function calculateLuminance(color) {
  var normalizedColor = color.map(function (channel) {
    return channel / 255;
  });
  var gammaCorrectedRGB = normalizedColor.map(function (channel) {
    return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);
  });
  var luminance = gammaCorrectedRGB[0] * 0.2126 + gammaCorrectedRGB[1] * 0.7152 + gammaCorrectedRGB[2] * 0.0722;
  return luminance;
}

function getRGB(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b;
  var rgbColorArray = [r, g, b].map(function (channel) {
    return Math.round(channel * 255);
  });
  return rgbColorArray;
}

function overlay(foreground, alpha, backgound) {
  if (alpha >= 1) {
    return foreground;
  }

  var overlaid = foreground.map(function (channel, i) {
    return Math.round(channel * alpha + backgound[i] * (1 - alpha));
  });
  return overlaid;
}

function getContrastScores(contrast) {
  var largeText;
  var normalText;

  switch (true) {
    case contrast > 7:
      largeText = 'AAA';
      normalText = 'AAA';
      break;

    case contrast > 4.5:
      largeText = 'AAA';
      normalText = 'AA';
      break;

    case contrast > 3:
      largeText = 'AA';
      normalText = 'FAIL';
      break;

    default:
      largeText = 'FAIL';
      normalText = 'FAIL';
      break;
  }

  return {
    largeText: largeText,
    normalText: normalText
  };
}

function sendContrastInfo(contrast, foreground, backgound) {
  figma.ui.postMessage({
    type: 'selectionChange',
    foreground: convertRgbToHex(foreground),
    background: convertRgbToHex(backgound),
    contrast: contrast,
    scores: getContrastScores(contrast)
  });
}

function calculateAndSendContrast(foreground, alpha, backgound) {
  if (alpha < 1) {
    foreground = overlay(foreground, alpha, backgound);
  }

  var foregroundLuminance = calculateLuminance(foreground) + 0.05;
  var backgroundLuminance = calculateLuminance(backgound) + 0.05;
  var contrast = foregroundLuminance / backgroundLuminance;

  if (backgroundLuminance > foregroundLuminance) {
    contrast = 1 / contrast;
  }

  contrast = Math.floor(contrast * 100) / 100;
  return sendContrastInfo(contrast, foreground, backgound);
}

function findFills(nodes) {
  var nodesWithFills = nodes.filter(function (node) {
    return node.fills && node.fills.length > 0 && node.fills[0].type === 'SOLID';
  });

  if (nodesWithFills.length <= 0) {
    return figma.notify('Please select a layer that has a solid fill', {
      timeout: 1000
    });
  }

  var fills = nodesWithFills.map(function (node) {
    return node.fills[0];
  });
  return fills;
}

figma.on('selectionchange', function () {
  var fills = findFills(figma.currentPage.selection);

  if (fills.length > 1) {
    foregroundColor = getRGB(fills[0].color);
    foregroundAlpha = fills[0].opacity;
    backgoundColor = getRGB(fills[1].color);
    backgroundAlpha = fills[1].opacity;
    calculateAndSendContrast(foregroundColor, foregroundAlpha, backgoundColor);
  }

  if (fills.length === 1) {
    var _fills = findFills(figma.currentPage.selection);

    foregroundColor = getRGB(_fills[0].color);
    foregroundAlpha = _fills[0].opacity;
    calculateAndSendContrast(foregroundColor, foregroundAlpha, backgoundColor);
  }
});

figma.ui.onmessage = function (msg) {
  if (msg.type === 'swap') {
    ;
    var _ref2 = [backgoundColor, foregroundColor, backgroundAlpha, foregroundAlpha];
    foregroundColor = _ref2[0];
    backgoundColor = _ref2[1];
    foregroundAlpha = _ref2[2];
    backgroundAlpha = _ref2[3];
    calculateAndSendContrast(foregroundColor, foregroundAlpha, backgoundColor);
  }
}; // call on plugin start


figma.showUI(__html__, {
  width: 340,
  height: 405
});
calculateAndSendContrast(foregroundColor, foregroundAlpha, backgoundColor);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,